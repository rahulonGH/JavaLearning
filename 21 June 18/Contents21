Exception Handling in Java
============================
Exception is an object that describes an exceptional condition that has occured in a piece of code.
it stops the program regular execution flow unwantedly.

when an exception arises, an object of exception is created and thrown in the method that causes that situation.
either the method will handle it or it will pass it on, somehow exception will be caught and processed.

exceptions can be generated by JRE or by own.

exception handling is managed by 5 keywords :  try, catch, throws, throw and finally

Exception Types
==================
1. Error : irrecoverable exceptions. eg: OutOfMemory Error, VirtualMachine Error
           if an error occurs , program will terminate without giving a chance to handle

2. Checked Exceptions: occurs at compile time
						the classes that extends Throwable, except RutimeException and Error
						eg: IOException 
3. Uncheked Exception: occurs at runtime
						the classes that extends RutimeException 
						eg: NullPointerException
						
Note: when you are using multiple catch blocks. it is important to remember ,
that exception subclass must come before any of the subclasses, 
because a catch block that is catching superclass exception will also catch subclass exceptions.
thus the subclass will never be reached  if came after superclass .
And according to java Unreachable codes are compilation error.

finally
===========
will execute whether or not the exception occured.

throws
=========
list all the exceptions that a method might throw.

throw
=========
to throw exceptions explicitly
 syntax:    throw ThrowableInstance;
      the Throwable instance must be an Object of type Throwable or its subclass